// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  Sizes      Size[]      @relation("StoreToSize")
  Colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Order      Order[]     @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[] @relation("BillboardToCategory")
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updateAt   DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("SizeToProduct")

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Decimal
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId     String
  size       Size        @relation("SizeToProduct", fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation("ColorToProduct", fields: [colorId], references: [id])
  isArchived Boolean     @default(false)
  isFeatured Boolean     @default(false)
  images     Image[]     @relation("ProductToImage")
  orderItems OrderItem[] @relation("ProductToOrderItem")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] @relation("OrderToOrderItem")
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation("OrderToOrderItem", fields: [orderId], references: [id])
  productId String
  product   Product @relation("ProductToOrderItem", fields: [productId], references: [id])

  @@index([productId])
  @@index([orderId])
}
